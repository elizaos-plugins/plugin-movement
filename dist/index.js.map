{"version":3,"sources":["../src/actions/transfer.ts","../src/providers/wallet.ts","../src/constants.ts","../src/index.ts"],"sourcesContent":["import { elizaLogger } from \"@elizaos/core\";\nimport {\n    type ActionExample,\n    type Content,\n    type HandlerCallback,\n    type IAgentRuntime,\n    type Memory,\n    ModelClass,\n    type State,\n    type Action,\n} from \"@elizaos/core\";\nimport { composeContext } from \"@elizaos/core\";\nimport { generateObjectDeprecated } from \"@elizaos/core\";\nimport {\n    Account,\n    Aptos,\n    AptosConfig,\n    Ed25519PrivateKey,\n    Network,\n    PrivateKey,\n    PrivateKeyVariants,\n} from \"@aptos-labs/ts-sdk\";\nimport { walletProvider } from \"../providers/wallet\";\nimport {\n    MOVEMENT_NETWORK_CONFIG,\n    MOVE_DECIMALS,\n    MOVEMENT_EXPLORER_URL,\n} from \"../constants\";\n\nexport interface TransferContent extends Content {\n    recipient: string;\n    amount: string | number;\n}\n\nfunction isTransferContent(content: unknown): content is TransferContent {\n    elizaLogger.debug(\"Validating transfer content:\", content);\n    return (\n        typeof (content as TransferContent).recipient === \"string\" &&\n        (typeof (content as TransferContent).amount === \"string\" ||\n            typeof (content as TransferContent).amount === \"number\")\n    );\n}\n\nconst transferTemplate = `You are processing a token transfer request. Extract the recipient address and amount from the message.\n\nExample request: \"can you send 1 move to 0x123...\"\nExample response:\n\\`\\`\\`json\n{\n    \"recipient\": \"0x123...\",\n    \"amount\": \"1\"\n}\n\\`\\`\\`\n\nRules:\n1. The recipient address always starts with \"0x\"\n2. The amount is typically a number less than 100\n3. Return exact values found in the message\n\nRecent messages:\n{{recentMessages}}\n\nExtract and return ONLY the following in a JSON block:\n- recipient: The wallet address starting with 0x\n- amount: The number of tokens to send\n\nReturn ONLY the JSON block with these two fields.`;\n\nexport default {\n    name: \"TRANSFER_MOVE\",\n    similes: [\n        \"SEND_TOKEN\",\n        \"TRANSFER_TOKEN\",\n        \"TRANSFER_TOKENS\",\n        \"SEND_TOKENS\",\n        \"SEND_MOVE\",\n        \"PAY\",\n    ],\n    triggers: [\n        \"send move\",\n        \"send 1 move\",\n        \"transfer move\",\n        \"send token\",\n        \"transfer token\",\n        \"can you send\",\n        \"please send\",\n        \"send\",\n    ],\n    shouldHandle: (message: Memory) => {\n        const text = message.content?.text?.toLowerCase() || \"\";\n        return (\n            text.includes(\"send\") &&\n            text.includes(\"move\") &&\n            text.includes(\"0x\")\n        );\n    },\n    validate: async (_runtime: IAgentRuntime, message: Memory) => {\n        elizaLogger.debug(\n            \"Starting transfer validation for user:\",\n            message.userId\n        );\n        elizaLogger.debug(\"Message text:\", message.content?.text);\n        return true; // Let the handler do the validation\n    },\n    priority: 1000, // High priority for transfer actions\n    description:\n        \"Transfer Move tokens from the agent's wallet to another address\",\n    handler: async (\n        runtime: IAgentRuntime,\n        message: Memory,\n        state: State,\n        _options: { [key: string]: unknown },\n        callback?: HandlerCallback\n    ): Promise<boolean> => {\n        elizaLogger.debug(\"Starting TRANSFER_MOVE handler...\");\n        elizaLogger.debug(\"Message:\", {\n            text: message.content?.text,\n            userId: message.userId,\n            action: message.content?.action,\n        });\n\n        try {\n            const privateKey = runtime.getSetting(\"MOVEMENT_PRIVATE_KEY\");\n            elizaLogger.debug(\n                \"Got private key:\",\n                privateKey ? \"Present\" : \"Missing\"\n            );\n\n            const network = runtime.getSetting(\"MOVEMENT_NETWORK\");\n            elizaLogger.debug(\"Network config:\", network);\n            elizaLogger.debug(\n                \"Available networks:\",\n                Object.keys(MOVEMENT_NETWORK_CONFIG)\n            );\n\n            const movementAccount = Account.fromPrivateKey({\n                privateKey: new Ed25519PrivateKey(\n                    PrivateKey.formatPrivateKey(\n                        privateKey,\n                        PrivateKeyVariants.Ed25519\n                    )\n                ),\n            });\n            elizaLogger.debug(\n                \"Created Movement account:\",\n                movementAccount.accountAddress.toStringLong()\n            );\n\n            const aptosClient = new Aptos(\n                new AptosConfig({\n                    network: Network.CUSTOM,\n                    fullnode: MOVEMENT_NETWORK_CONFIG[network].fullnode,\n                })\n            );\n            elizaLogger.debug(\n                \"Created Aptos client with network:\",\n                MOVEMENT_NETWORK_CONFIG[network].fullnode\n            );\n\n            const walletInfo = await walletProvider.get(\n                runtime,\n                message,\n                state\n            );\n            state.walletInfo = walletInfo;\n\n            // Initialize or update state\n            let currentState: State;\n            if (!state) {\n                currentState = (await runtime.composeState(message)) as State;\n            } else {\n                currentState = await runtime.updateRecentMessageState(state);\n            }\n\n            // Compose transfer context\n            const transferContext = composeContext({\n                state: currentState,\n                template: transferTemplate,\n            });\n\n            // Generate transfer content\n            const content = await generateObjectDeprecated({\n                runtime,\n                context: transferContext,\n                modelClass: ModelClass.SMALL,\n            });\n\n            // Validate transfer content\n            if (!isTransferContent(content)) {\n                console.error(\"Invalid content for TRANSFER_TOKEN action.\");\n                if (callback) {\n                    callback({\n                        text: \"Unable to process transfer request. Invalid content provided.\",\n                        content: { error: \"Invalid transfer content\" },\n                    });\n                }\n                return false;\n            }\n\n            const adjustedAmount = BigInt(\n                Number(content.amount) * 10 ** MOVE_DECIMALS\n            );\n            console.log(\n                `Transferring: ${content.amount} tokens (${adjustedAmount} base units)`\n            );\n\n            const tx = await aptosClient.transaction.build.simple({\n                sender: movementAccount.accountAddress.toStringLong(),\n                data: {\n                    function: \"0x1::aptos_account::transfer\",\n                    typeArguments: [],\n                    functionArguments: [content.recipient, adjustedAmount],\n                },\n            });\n            const committedTransaction =\n                await aptosClient.signAndSubmitTransaction({\n                    signer: movementAccount,\n                    transaction: tx,\n                });\n            const executedTransaction = await aptosClient.waitForTransaction({\n                transactionHash: committedTransaction.hash,\n            });\n\n            const explorerUrl = `${MOVEMENT_EXPLORER_URL}/${executedTransaction.hash}?network=${MOVEMENT_NETWORK_CONFIG[network].explorerNetwork}`;\n            elizaLogger.debug(\"Transfer successful:\", {\n                hash: executedTransaction.hash,\n                amount: content.amount,\n                recipient: content.recipient,\n                explorerUrl,\n            });\n\n            if (callback) {\n                callback({\n                    text: `Successfully transferred ${content.amount} MOVE to ${content.recipient}\\nTransaction: ${executedTransaction.hash}\\nView on Explorer: ${explorerUrl}`,\n                    content: {\n                        success: true,\n                        hash: executedTransaction.hash,\n                        amount: content.amount,\n                        recipient: content.recipient,\n                        explorerUrl,\n                    },\n                });\n            }\n\n            return true;\n        } catch (error) {\n            console.error(\"Error during token transfer:\", error);\n            if (callback) {\n                callback({\n                    text: `Error transferring tokens: ${error.message}`,\n                    content: { error: error.message },\n                });\n            }\n            return false;\n        }\n    },\n\n    examples: [\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"can you send 1 move to 0xa07ab7d3739dc793f9d538f7d7163705176ba59f7a8c994a07357a3a7d97d843\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"I'll help you transfer 1 Move token...\",\n                    action: \"TRANSFER_MOVE\",\n                },\n            },\n        ],\n        [\n            {\n                user: \"{{user1}}\",\n                content: {\n                    text: \"send 1 move to 0xa07ab7d3739dc793f9d538f7d7163705176ba59f7a8c994a07357a3a7d97d843\",\n                },\n            },\n            {\n                user: \"{{user2}}\",\n                content: {\n                    text: \"Processing Move token transfer...\",\n                    action: \"TRANSFER_MOVE\",\n                },\n            },\n        ],\n    ] as ActionExample[][],\n} as Action;\n","import type {\n    IAgentRuntime,\n    ICacheManager,\n    Memory,\n    Provider,\n    State,\n} from \"@elizaos/core\";\nimport {\n    Account,\n    Aptos,\n    AptosConfig,\n    Ed25519PrivateKey,\n    Network,\n    PrivateKey,\n    PrivateKeyVariants,\n} from \"@aptos-labs/ts-sdk\";\nimport BigNumber from \"bignumber.js\";\nimport NodeCache from \"node-cache\";\nimport * as path from \"node:path\";\nimport { MOVE_DECIMALS, MOVEMENT_NETWORK_CONFIG } from \"../constants\";\n\n// Provider configuration\nconst PROVIDER_CONFIG = {\n    MAX_RETRIES: 3,\n    RETRY_DELAY: 2000,\n};\n\ninterface WalletPortfolio {\n    totalUsd: string;\n    totalMove: string;\n}\n\ninterface Prices {\n    move: { usd: string };\n}\n\nexport class WalletProvider {\n    private cache: NodeCache;\n    private cacheKey = \"movement/wallet\";\n\n    constructor(\n        private aptosClient: Aptos,\n        private address: string,\n        private cacheManager: ICacheManager\n    ) {\n        this.cache = new NodeCache({ stdTTL: 300 }); // Cache TTL set to 5 minutes\n    }\n\n    private async readFromCache<T>(key: string): Promise<T | null> {\n        const cached = await this.cacheManager.get<T>(\n            path.join(this.cacheKey, key)\n        );\n        return cached;\n    }\n\n    private async writeToCache<T>(key: string, data: T): Promise<void> {\n        await this.cacheManager.set(path.join(this.cacheKey, key), data, {\n            expires: Date.now() + 5 * 60 * 1000,\n        });\n    }\n\n    private async getCachedData<T>(key: string): Promise<T | null> {\n        // Check in-memory cache first\n        const cachedData = this.cache.get<T>(key);\n        if (cachedData) {\n            return cachedData;\n        }\n\n        // Check file-based cache\n        const fileCachedData = await this.readFromCache<T>(key);\n        if (fileCachedData) {\n            // Populate in-memory cache\n            this.cache.set(key, fileCachedData);\n            return fileCachedData;\n        }\n\n        return null;\n    }\n\n    private async setCachedData<T>(cacheKey: string, data: T): Promise<void> {\n        // Set in-memory cache\n        this.cache.set(cacheKey, data);\n\n        // Write to file-based cache\n        await this.writeToCache(cacheKey, data);\n    }\n\n    private async fetchPricesWithRetry() {\n        let lastError: Error;\n\n        for (let i = 0; i < PROVIDER_CONFIG.MAX_RETRIES; i++) {\n            try {\n                const MoveUsdcPoolAddr =\n                    \"0xA04d13F092f68F603A193832222898B0d9f52c71\";\n                const response = await fetch(\n                    `https://api.dexscreener.com/latest/dex/pairs/ethereum/${MoveUsdcPoolAddr}`\n                );\n\n                if (!response.ok) {\n                    const errorText = await response.text();\n                    throw new Error(\n                        `HTTP error! status: ${response.status}, message: ${errorText}`\n                    );\n                }\n\n                const data = await response.json();\n                return data;\n            } catch (error) {\n                console.error(`Attempt ${i + 1} failed:`, error);\n                lastError = error;\n                if (i < PROVIDER_CONFIG.MAX_RETRIES - 1) {\n                    const delay = PROVIDER_CONFIG.RETRY_DELAY * (2 ** i);\n                    await new Promise((resolve) => setTimeout(resolve, delay));\n                    \n                }\n            }\n        }\n\n        console.error(\n            \"All attempts failed. Throwing the last error:\",\n            lastError\n        );\n        throw lastError;\n    }\n\n    async fetchPortfolioValue(): Promise<WalletPortfolio> {\n        try {\n            const cacheKey = `portfolio-${this.address}`;\n            const cachedValue =\n                await this.getCachedData<WalletPortfolio>(cacheKey);\n\n            if (cachedValue) {\n                console.log(\"Cache hit for fetchPortfolioValue\", cachedValue);\n                return cachedValue;\n            }\n            console.log(\"Cache miss for fetchPortfolioValue\");\n\n            const prices = await this.fetchPrices().catch((error) => {\n                console.error(\"Error fetching Move price:\", error);\n                throw error;\n            });\n            const moveAmountOnChain = await this.aptosClient\n                .getAccountAPTAmount({\n                    accountAddress: this.address,\n                })\n                .catch((error) => {\n                    console.error(\"Error fetching Move amount:\", error);\n                    throw error;\n                });\n\n            const moveAmount = new BigNumber(moveAmountOnChain).div(\n                new BigNumber(10).pow(MOVE_DECIMALS)\n            );\n            const totalUsd = new BigNumber(moveAmount).times(prices.move.usd);\n\n            const portfolio = {\n                totalUsd: totalUsd.toString(),\n                totalMove: moveAmount.toString(),\n            };\n            this.setCachedData(cacheKey, portfolio);\n            console.log(\"Fetched portfolio:\", portfolio);\n            return portfolio;\n        } catch (error) {\n            console.error(\"Error fetching portfolio:\", error);\n            throw error;\n        }\n    }\n\n    async fetchPrices(): Promise<Prices> {\n        try {\n            const cacheKey = \"prices\";\n            const cachedValue = await this.getCachedData<Prices>(cacheKey);\n\n            if (cachedValue) {\n                console.log(\"Cache hit for fetchPrices\");\n                return cachedValue;\n            }\n            console.log(\"Cache miss for fetchPrices\");\n\n            const movePriceData = await this.fetchPricesWithRetry().catch(\n                (error) => {\n                    console.error(\"Error fetching Move price:\", error);\n                    throw error;\n                }\n            );\n            const prices: Prices = {\n                move: { usd: movePriceData.pair.priceUsd },\n            };\n            this.setCachedData(cacheKey, prices);\n            return prices;\n        } catch (error) {\n            console.error(\"Error fetching prices:\", error);\n            throw error;\n        }\n    }\n\n    formatPortfolio(runtime, portfolio: WalletPortfolio): string {\n        let output = `${runtime.character.name}\\n`;\n        output += `Wallet Address: ${this.address}\\n`;\n\n        const totalUsdFormatted = new BigNumber(portfolio.totalUsd).toFixed(2);\n        const totalMoveFormatted = new BigNumber(portfolio.totalMove).toFixed(4);\n\n        output += `Total Value: $${totalUsdFormatted} (${totalMoveFormatted} Move)\\n`;\n\n        return output;\n    }\n\n    async getFormattedPortfolio(runtime): Promise<string> {\n        try {\n            const portfolio = await this.fetchPortfolioValue();\n            return this.formatPortfolio(runtime, portfolio);\n        } catch (error) {\n            console.error(\"Error generating portfolio report:\", error);\n            return \"Unable to fetch wallet information. Please try again later.\";\n        }\n    }\n}\n\nconst walletProvider: Provider = {\n    get: async (\n        runtime: IAgentRuntime,\n        _message: Memory,\n        _state?: State\n    ): Promise<string | null> => {\n        const privateKey = runtime.getSetting(\"MOVEMENT_PRIVATE_KEY\");\n        const movementAccount = Account.fromPrivateKey({\n            privateKey: new Ed25519PrivateKey(\n                PrivateKey.formatPrivateKey(\n                    privateKey,\n                    PrivateKeyVariants.Ed25519\n                )\n            ),\n        });\n        const network = runtime.getSetting(\"MOVEMENT_NETWORK\") as Network;\n\n        try {\n            const aptosClient = new Aptos(\n                new AptosConfig({\n                    network: Network.CUSTOM,\n                    fullnode: MOVEMENT_NETWORK_CONFIG[network].fullnode\n                })\n            );\n            const provider = new WalletProvider(\n                aptosClient,\n                movementAccount.accountAddress.toStringLong(),\n                runtime.cacheManager\n            );\n            return await provider.getFormattedPortfolio(runtime);\n        } catch (error) {\n            console.error(\"Error in wallet provider:\", error);\n            return null;\n        }\n    },\n};\n\n// Module exports\nexport { walletProvider };\n","export const MOVE_DECIMALS = 8;\n\nexport const MOVEMENT_NETWORK_CONFIG = {\n    mainnet: {\n        fullnode: 'https://mainnet.movementnetwork.xyz/v1',\n        chainId: '126',\n        name: 'Movement Mainnet',\n        explorerNetwork: 'mainnet'\n    },\n    bardock: {\n        fullnode: 'https://aptos.testnet.bardock.movementlabs.xyz/v1',\n        chainId: '250',\n        name: 'Movement Bardock Testnet',\n        explorerNetwork: 'bardock+testnet'\n    }\n} as const;\n\nexport const DEFAULT_NETWORK = 'bardock';\nexport const MOVEMENT_EXPLORER_URL = 'https://explorer.movementnetwork.xyz/txn';","import type { Plugin } from \"@elizaos/core\";\nimport transferToken from \"./actions/transfer\";\nimport { WalletProvider, walletProvider } from \"./providers/wallet\";\n\nexport { WalletProvider, transferToken as TransferMovementToken };\n\nexport const movementPlugin: Plugin = {\n    name: \"movement\",\n    description: \"Movement Network Plugin for Eliza\",\n    actions: [transferToken],\n    evaluators: [],\n    providers: [walletProvider],\n};\n\nexport default movementPlugin;\n"],"mappings":"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","names":["Account","Aptos","AptosConfig","Ed25519PrivateKey","Network","PrivateKey","PrivateKeyVariants","Account","Ed25519PrivateKey","PrivateKey","PrivateKeyVariants","Aptos","AptosConfig","Network"]}